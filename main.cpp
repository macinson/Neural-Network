#include <iostream>
#include <cmath>
#include "Common/Vector.h"
#include "Common/Matrix.h"
#include "Neural network components/NeuralNetwork.h"
#include <utility>
#include <vector>
#include "Common/UsefulMethods.h"

using namespace std;

double random() {
    return ((double) rand() / RAND_MAX);
}

int main() {
    TrainingSet trainingSet = TrainingSet::csvNumber("../Resources/testSetNumbers.txt");
    Matrix m1(16, 784, &random);
    Matrix m2(16, 16, &random);
    Matrix m3(10, 16, &random);
    Vector b1(16, &random);
    Vector b2(16, &random);
    Vector b3(10, &random);
    vector<Layer> layers;
    layers.emplace_back(m1, b1);
    layers.emplace_back(m2, b2);
    layers.emplace_back(m3, b3);
    NeuralNetwork numbers(layers, UsefulMethods::sigmoid, UsefulMethods::sigmoidDerivative);

    numbers.backProp(trainingSet, 0.1);

    Vector input = Vector::commaSeperatedToVector("0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,103,225,255,254,203,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,94,196,240,253,253,253,253,253,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,206,253,253,253,249,142,105,75,253,228,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,253,253,253,190,108,0,0,144,253,253,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,253,253,151,5,0,0,84,247,253,213,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,141,140,2,0,0,55,246,253,250,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,233,253,253,103,0,0,0,0,0,0,0,0,0,0,0,0,61,139,166,166,160,22,0,0,0,0,84,248,253,253,184,13,0,0,0,0,0,0,0,0,0,0,0,166,252,253,253,253,253,227,82,0,0,82,244,253,252,189,14,0,0,0,0,0,0,0,0,0,0,0,29,232,253,253,216,140,192,253,251,93,93,252,253,247,98,0,0,0,0,0,0,0,0,0,0,0,0,0,88,253,253,221,33,0,4,143,253,253,253,253,253,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,253,253,170,0,0,3,136,253,253,253,253,222,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,253,253,134,0,26,183,253,253,253,253,222,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,253,253,166,145,243,253,253,253,234,247,251,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,236,253,253,253,253,253,234,131,28,98,252,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,253,253,251,233,135,19,0,0,0,249,208,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,186,82,0,0,0,0,0,0,222,253,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,253,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,253,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,160,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") * (1.0/255);

    Vector output = numbers.output(input);

    for(int i = 0; i < 10; i++){
        cout << i << ": " << UsefulMethods::doubleToString(output.getComponent(i),2) << endl;
    }

    return 0;
}


